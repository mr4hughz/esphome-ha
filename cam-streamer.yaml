# v2.0 cam-streamer 
# This description is to make the code easier to read
# # so this device needs to be as "dumb" as possible, all tags handeling should be done by home assistant (if possible)
################# 
# board esp-wrover-kit # https://esphome.io/devices/nodemcu_esp32.html ESP32-DevkitC
# 
# 3,3v pin (power)
# EN to ground = reset button 
# D0 = programming pin (do not connect)
# D2 = internal led pin (do not connect)
# D5 = internal  pin (do not connect)
# D6,7,8,9,10,11, = internal  pin (do not connect)
# D15 = internal  pin (do not connect)
# D34.35,vp.vn = input only no internal pull up
# GPIO1  = txd internal flashing (use gpio17 instead)
# GPIO3  = rxd internal flashing (use gpio16 instead)
################# 
#
#
################
substitutions: 
  web_port: "80"
  web_version: "2"
  platform: ESP32
  board: esp32cam #esp-wrover-kit # https://esphome.io/devices/nodemcu_esp32.html ESP32-DevkitC
  core: dev
  arduino: recommended
  
  ## Identity
  devicename: cam-streamer
  upper_devicename: CamStreamer
  logger_level: DEBUG # default DEBUG, options = NONE,ERROR,WARN,INFO,VERBOSE,VERY_VERBOSE
  # https://esphome.io/components/logger.html?highlight=logger

  ###### Pins
  dhtpin: GPIO13
  voltagepin: GPIO32

esphome:
  name: $devicename
  board: $board
  platform: $platform
  #name_add_mac_suffix: true # this sucks 
  on_boot:
    then:
      - script.execute: boot_script

#esp32_ble_tracker:
#  scan_parameters:
#    interval: 1100ms
#    window: 1100ms
#    active: true

#bluetooth_proxy:
#  active: true

script:
  - id: boot_script
    then:
      - logger.log:
          format: "boot_script started"
          level: INFO
      - logger.log:
          format: "waiting for api connection"
          level: INFO
      - wait_until:
          condition:
            api.connected:
      - logger.log:
          format: "api is connected"
          level: INFO



# Enable logging
logger:
  level: $logger_level
  logs:
    mqtt.component: DEBUG
    mqtt.client: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_ecryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: !secret IP_adrress119
  manual_ip:
    static_ip: !secret IP_address119
    gateway: !secret IP_gateway
    subnet: !secret IP_subnet
    dns1: !secret IP_dns1
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $devicename " Hotspot"
    password: !secret wifi_AP_key

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${devicename} IP Address
    ssid:
      name: ${devicename} Connected SSID
    bssid:
      name: ${devicename} Connected BSSID
    mac_address:
      name: ${devicename} Mac Wifi Address
    scan_results:
      name: ${devicename} Latest Scan Results

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time
    
web_server:
  port: $web_port
  version: 2

switch:
  - platform: restart
    name: ${devicename}" Restart"

esp32_camera:
  name: "Doda" 
  external_clock:
    pin: GPIO21
    frequency: 10MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO4, GPIO5, GPIO18, GPIO19, GPIO36, GPIO39, GPIO34, GPIO35] #[GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  #power_down_pin: GPIO32
  resolution: 1280x1024 #1024x768
  #jpeg_quality: 63
  vertical_flip: true

esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    

